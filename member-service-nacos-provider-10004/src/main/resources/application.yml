server:
  port: 10004

spring:
  application:
    name: member-service-nacos-provider
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    url: jdbc:mysql://localhost:3306/springcloud_DB
    username: root
    password: root
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848 # 配置 Nacos 地址
    sentinel:
      transport:
        dashboard: localhost:8080 # 这个是 Sentinel 控制台的地址
        port: 8719 # 默认8719，加入被占用了，会自动从 8719 开始依次 +1 扫墓，直至找到未被占用的端口
        # 解读 transport.port
        #1.spring.cloud.sentinel.transport.port 端口配置会在被监控的微服务对应的机器上启动一个 Http Server
        #2.该 Server 会与 Sentinel 控制台做交互
        #3.比如 Sentinel 控制台添加了一个限流规则，会把规则数据 push 给这个 Http Server 接收
        #  Http Server 再将规则注册到 Sentinel 中
        #4.简单说明：spring.cloud.sentinel.transport.port：指定被监控的微服务应用与 Sentinel 控制台交互的端口，
        #  微服务应用本地会起一个该端口占用的 Http Server
# 暴露所有监控点
management:
  endpoints:
    web:
      exposure:
        include: '*'
mybatis:
  mapper-locations: classpath:mapper/*.xml # 指定 mapper.xml文件位置
  type-aliases-package: com.springcloud.entity # 实例类所在的包，这样通过类名可以引用
